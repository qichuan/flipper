(self.webpackChunk=self.webpackChunk||[]).push([[8488],{3905:(e,n,r)=>{"use strict";r.d(n,{Zo:()=>u,kt:()=>d});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=a.createContext({}),c=function(e){var n=a.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=c(r),d=t,f=g["".concat(p,".").concat(d)]||g[d]||s[d]||l;return r?a.createElement(f,o(o({ref:n},u),{},{components:r})):a.createElement(f,o({ref:n},u))}));function d(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=r.length,o=new Array(l);o[0]=g;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},1547:(e,n,r)=>{"use strict";r.r(n),r.d(n,{frontMatter:()=>o,metadata:()=>i,toc:()=>p,default:()=>u});var a=r(4034),t=r(9973),l=(r(7294),r(3905)),o={},i={type:"mdx",permalink:"/docs/plugins/fresco/setup",source:"@site/src/embedded-pages/docs/plugins/fresco/setup.mdx"},p=[{value:"Fresco and Android",id:"fresco-and-android",children:[{value:"Leak Tracking",id:"leak-tracking",children:[]},{value:"Attribution",id:"attribution",children:[]}]}],c={toc:p};function u(e){var n=e.components,r=(0,t.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Currently, the images plugin only supports ",(0,l.kt)("a",{parentName:"p",href:"https://frescolib.org/"},"Fresco")," for Android as backend, but just like the network plugin, support for other image loading libraries\ncould easily be added. Send us a PR!"),(0,l.kt)("h2",{id:"fresco-and-android"},"Fresco and Android"),(0,l.kt)("p",null,"The Fresco images plugin is shipped as a separate Maven artifact:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-groovy"},"dependencies {\n  debugImplementation 'com.facebook.flipper:flipper-fresco-plugin:0.30.1'\n}\n")),(0,l.kt)("p",null,"After including the plugin in your dependencies, you can add it to the\nclient:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"import com.facebook.flipper.plugins.fresco.FrescoFlipperPlugin;\n\nclient.addPlugin(new FrescoFlipperPlugin());\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"FrescoFlipperPlugin")," constructor offers a whole lot of configuration options which\ncan be useful if you have an advanced setup of Fresco in your application:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"FrescoFlipperPlugin(\n      DebugImageTracker imageTracker,\n      PlatformBitmapFactory bitmapFactory,\n      @Nullable FlipperObjectHelper flipperObjectHelper,\n      DebugMemoryManager memoryManager,\n      FlipperPerfLogger perfLogger,\n      @Nullable FrescoFlipperDebugPrefHelper debugPrefHelper,\n      @Nullable CloseableReferenceLeakTracker closeableReferenceLeakTracker) { ... }\n")),(0,l.kt)("h3",{id:"leak-tracking"},"Leak Tracking"),(0,l.kt)("p",null,"The Flipper plugin can help you track down ",(0,l.kt)("inlineCode",{parentName:"p"},"CloseableReferences")," who have not had\n",(0,l.kt)("inlineCode",{parentName:"p"},"close()")," called on them. This can have a negative impact on the performance of\nyour application."),(0,l.kt)("p",null,"To enable this functionality, you need to create a ",(0,l.kt)("inlineCode",{parentName:"p"},"CloseableReferenceLeakTracker"),"\nand set it in both your ",(0,l.kt)("inlineCode",{parentName:"p"},"ImagePipelineConfig")," for Fresco and the ",(0,l.kt)("inlineCode",{parentName:"p"},"FrescoPluginPlugin"),"\non creation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"import com.facebook.imagepipeline.debug.FlipperCloseableReferenceLeakTracker;\n\n// ...\n\nFlipperCloseableReferenceLeakTracker leakTracker = new FlipperCloseableReferenceLeakTracker();\n\nnew ImagePipelineConfig.Builder()\n    // ...\n    .setCloseableReferenceLeakTracker(leakTracker)\n    .build();\n\n\nclient.addPlugin(new FrescoFlipperPlugin(\n    new FlipperImageTracker(),\n    Fresco.getImagePipelineFactory().getPlatformBitmapFactory(),\n    null,\n    new NoOpDebugMemoryManager(),\n    new NoOpFlipperPerfLogger(),\n    null,\n    leakTracker));\n")),(0,l.kt)("h3",{id:"attribution"},"Attribution"),(0,l.kt)("p",null,"In order to annotate images with the context they are used in, you have to set a\ncaller context when loading the image. This can be any object, so for the simplest\ncase, a String will suffice."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'String callerContext = "my_feature";\n\n// For DraweeViews:\ndraweeView.setImageURI(uri, callerContext);\n\n// For prefetching:\nImagePipeline imagePipeline = Fresco.getImagePipeline();\nimagePipeline.prefetchToDiskCache(imageRequest, callerContext);\n\n// For manually fetching an image:\nDataSource<CloseableReference<CloseableImage>>\n    dataSource = imagePipeline.fetchDecodedImage(imageRequest, callerContext);\n')),(0,l.kt)("p",null,"If a caller context is supplied, the image will be properly attributed in the\nFlipper image plugin."))}u.isMDXComponent=!0}}]);