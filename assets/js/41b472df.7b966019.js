(self.webpackChunk=self.webpackChunk||[]).push([[4257],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294);const i=function(e){var t=e.children,n=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},1395:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(7294),i=n(944),o=n(6010);const a="tabItem_1uMI",s="tabItemActive_2DSg";var l=37,p=39;const c=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,u=e.values,d=e.groupId,m=e.className,g=(0,i.Z)(),f=g.tabGroupChoices,k=g.setTabGroupChoices,y=(0,r.useState)(c),h=y[0],b=y[1],v=r.Children.toArray(e.children),w=[];if(null!=d){var T=f[d];null!=T&&T!==h&&u.some((function(e){return e.value===T}))&&b(T)}var x=function(e){var t=e.currentTarget,n=w.indexOf(t),r=u[n].value;b(r),null!=d&&(k(d,r),setTimeout((function(){var e,n,r,i,o,a,l,p;(e=t.getBoundingClientRect(),n=e.top,r=e.left,i=e.bottom,o=e.right,a=window,l=a.innerHeight,p=a.innerWidth,n>=0&&o<=p&&i<=l&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},F=function(e){var t,n;switch(e.keyCode){case p:var r=w.indexOf(e.target)+1;n=w[r]||w[0];break;case l:var i=w.indexOf(e.target)-1;n=w[i]||w[w.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},m)},u.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:(0,o.Z)("tabs__item",a,{"tabs__item--active":h===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:F,onFocus:x,onClick:x},n)}))),t?(0,r.cloneElement)(v.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},9443:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(7294).createContext)(void 0)},944:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294),i=n(9443);const o=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},9082:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>l,metadata:()=>p,toc:()=>c,default:()=>y});var r=n(4034),i=n(9973),o=(n(7294),n(3905)),a=n(1395),s=n(8215),l={id:"testing",title:"Testing"},p={unversionedId:"extending/testing",id:"extending/testing",isDocsHomePage:!1,title:"Testing",description:"Developer tools are only used if they work. We have built APIs to test plugins.",source:"@site/../docs/extending/testing.mdx",sourceDirName:"extending",slug:"/extending/testing",permalink:"/docs/extending/testing",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/extending/testing.mdx",version:"current",frontMatter:{id:"testing",title:"Testing"},sidebar:"extending",previous:{title:"Plugin structure",permalink:"/docs/extending/desktop-plugin-structure"},next:{title:"Debugging",permalink:"/docs/extending/debugging"}},c=[{value:"Writing tests",id:"writing-tests",children:[]},{value:"Desktop plugins",id:"desktop-plugins",children:[]},{value:"Client plugins",id:"client-plugins",children:[]},{value:"Running (Flipper) tests",id:"running-flipper-tests",children:[{value:"Flipper Desktop",id:"flipper-desktop",children:[]},{value:"Flipper SDK",id:"flipper-sdk",children:[]},{value:"iOS",id:"ios",children:[]},{value:"React Native",id:"react-native",children:[]}]}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=u("OssOnly"),m=u("FbAndroidTesting"),g=u("FbIosTesting"),f=u("FbInternalOnly"),k={toc:c};function y(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Developer tools are only used if they work. We have built APIs to test plugins."),(0,o.kt)("h2",{id:"writing-tests"},"Writing tests"),(0,o.kt)("h2",{id:"desktop-plugins"},"Desktop plugins"),(0,o.kt)("p",null,"Flipper uses ",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," as unit testing framework."),(0,o.kt)("p",null,"Writing unit tests for Flipper Desktop plugins is covered in detail in the ",(0,o.kt)("a",{parentName:"p",href:"../../docs/tutorial/js-custom#testing-plugin-logic"},"tutorial"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"flipper-plugin")," package provide several ",(0,o.kt)("a",{parentName:"p",href:"../../docs/extending/flipper-plugin#testutils"},"test utilities")," to make testing more convenient."),(0,o.kt)("h2",{id:"client-plugins"},"Client plugins"),(0,o.kt)(a.Z,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"android",mdxType:"TabItem"},(0,o.kt)(d,{mdxType:"OssOnly"},"Start by creating your first test file in this directory `MyFlipperPluginTest.java`. In the test method body we create our plugin which we want to test as well as a `FlipperConnectionMock`. In this contrived example we simply assert that our plugin's connected status is what we expect.",(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@RunWith(RobolectricTestRunner.class)\npublic class MyFlipperPluginTest {\n\n  @Test\n  public void myTest() {\n    final MyFlipperPlugin plugin = new MyFlipperPlugin();\n    final FlipperConnectionMock connection = new FlipperConnectionMock();\n\n    plugin.onConnect(connection);\n    assertThat(plugin.connected(), equalTo(true));\n  }\n}\n")),(0,o.kt)("p",null,"There are two mock classes that are used to construct tests ",(0,o.kt)("inlineCode",{parentName:"p"},"FlipperConnectionMock")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FlipperResponderMock"),". Together these can be used to write very powerful tests to verify the end to end behavior of your plugin. For example we can test if for a given incoming message our plugin responds as we expect."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void myTest() {\n  final MyFlipperPlugin plugin = new MyFlipperPlugin();\n  final FlipperConnectionMock connection = new FlipperConnectionMock();\n  final FlipperResponderMock responder = new FlipperResponderMock();\n\n  plugin.onConnect(connection);\n\n  final FlipperObject params = new FlipperObject.Builder()\n      .put("phrase", "flipper")\n      .build();\n  connection.receivers.get("myMethod").onReceive(params, responder);\n\n  assertThat(responder.successes, hasItem(\n      new FlipperObject.Builder()\n          .put("phrase", "ranos")\n          .build()));\n}\n'))),(0,o.kt)(m,{mdxType:"FbAndroidTesting"})),(0,o.kt)(s.Z,{value:"ios",mdxType:"TabItem"},(0,o.kt)(d,{mdxType:"OssOnly"},(0,o.kt)("p",null,"Start by creating your first test file in this directory ",(0,o.kt)("inlineCode",{parentName:"p"},"MyFlipperPluginTests.cpp")," and import the testing utilities from ",(0,o.kt)("inlineCode",{parentName:"p"},"fbsource//xplat/sonar/xplat:FlipperTestLib"),". These utilities mock out core pieces of the communication channel so that you can test your plugin in isolation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"#include <MyFlipperPlugin/MyFlipperPlugin.h>\n#include <FlipperTestLib/FlipperConnectionMock.h>\n#include <FlipperTestLib/FlipperResponderMock.h>\n\n#include <folly/json.h>\n#include <gtest/gtest.h>\n\nnamespace facebook {\nnamespace flipper {\nnamespace test {\n\nTEST(MyFlipperPluginTests, testDummy) {\n  EXPECT_EQ(1 + 1, 2);\n}\n\n} // namespace test\n} // namespace flipper\n} // namespace facebook\n")),(0,o.kt)("p",null,"Here is a simple test using these mock utilities to create a plugin, send some data, and assert that the result is as expected."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'TEST(MyFlipperPluginTests, testDummy) {\n  std::vector<folly::dynamic> successfulResponses;\n  auto responder = std::make_unique<FlipperResponderMock>(&successfulResponses);\n  auto conn = std::make_shared<FlipperConnectionMock>();\n\n  MyFlipperPlugin plugin;\n  plugin.didConnect(conn);\n\n  folly::dynamic message = folly::dynamic::object("param1", "hello");\n  folly::dynamic expectedResponse = folly::dynamic::object("response", "Hi there");\n\n  auto receiver = conn->receivers_["someMethod"];\n  receiver(message, std::move(responder));\n\n  EXPECT_EQ(successfulResponses.size(), 1);\n  EXPECT_EQ(successfulResponses.back(), expectedResponse);\n}\n'))),(0,o.kt)(g,{mdxType:"FbIosTesting"}))),(0,o.kt)("h2",{id:"running-flipper-tests"},"Running (Flipper) tests"),(0,o.kt)("h3",{id:"flipper-desktop"},"Flipper Desktop"),(0,o.kt)(d,{mdxType:"OssOnly"},(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn jest")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn jest --watch")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"desktop")," directory of your Flipper checkout.")),(0,o.kt)(f,{mdxType:"FbInternalOnly"},(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn jest")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn jest --watch")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"~/fbsource/xplat/sonar/desktop"))),(0,o.kt)("h3",{id:"flipper-sdk"},"Flipper SDK"),(0,o.kt)("h4",{id:"android-java"},"Android (Java)"),(0,o.kt)(d,{mdxType:"OssOnly"},(0,o.kt)("h5",{id:"gradle"},"Gradle:"),(0,o.kt)("p",null,"In the root directory of the checkout:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./gradlew android:test\n"))),(0,o.kt)(f,{mdxType:"FbInternalOnly"},(0,o.kt)("h5",{id:"gradle-1"},"Gradle:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd fbsource/xplat/sonar\n./gradlew android:test\n")),(0,o.kt)("h5",{id:"buck"},"Buck:"),(0,o.kt)("p",null,"I don't know of a way to run them locally \ud83d\ude1e Make a change and submit a diff."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"buck test ...")," should work, but doesn't seem to when run in xplat on mac but they do work on mobile on demand, if you use @mode/server."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Debugging note: They do work if you copy the files and BUCK file to")," ",(0,o.kt)("inlineCode",{parentName:"p"},"fbandroid/javatests")," ",(0,o.kt)("em",{parentName:"p"},"and change the rule from")," ",(0,o.kt)("inlineCode",{parentName:"p"},"sonar_android_test")," ",(0,o.kt)("em",{parentName:"p"},"to")," ",(0,o.kt)("inlineCode",{parentName:"p"},"robolectric3_test"))),(0,o.kt)(f,{mdxType:"FbInternalOnly"},(0,o.kt)("h3",{id:"ios"},"iOS"),(0,o.kt)("p",null,"Focus on the plugins, or flipper code you want but with the --with-tests param."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"arc focus ... --with-tests")),(0,o.kt)("p",null,"Then click the <-> icon  in xcode and you can run them there.")),(0,o.kt)("h3",{id:"react-native"},"React Native"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"testing-rn"},"testing React Native"),"."))}y.isMDXComponent=!0},6010:(e,t,n)=>{"use strict";function r(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:()=>i})}}]);