(self.webpackChunk=self.webpackChunk||[]).push([[4556],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>d,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),h=a,f=c["".concat(s,".").concat(h)]||c[h]||p[h]||r;return n?i.createElement(f,o(o({ref:t},d),{},{components:n})):i.createElement(f,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6742:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var i=n(9973),a=n(7294),r=n(3727),o=n(3919),l=n(412),s=(0,a.createContext)({collectLink:function(){}}),u=n(4996);const d=function(e){var t,n,d,p=e.isNavLink,c=e.to,h=e.href,f=e.activeClassName,m=e.isActive,b=e["data-noBrokenLinkCheck"],g=e.autoAddBaseUrl,w=void 0===g||g,k=(0,i.Z)(e,["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"]),v=(0,u.C)().withBaseUrl,y=(0,a.useContext)(s),C=c||h,x=(0,o.Z)(C),T=null==C?void 0:C.replace("pathname://",""),N=void 0!==T?(n=T,w&&function(e){return e.startsWith("/")}(n)?v(n):n):void 0,O=(0,a.useRef)(!1),j=p?r.OL:r.rU,P=l.default.canUseIntersectionObserver;(0,a.useEffect)((function(){return!P&&x&&null!=N&&window.docusaurus.prefetch(N),function(){P&&d&&d.disconnect()}}),[N,P,x]);var D=null!==(t=null==N?void 0:N.startsWith("#"))&&void 0!==t&&t,E=!N||!x||D;return N&&x&&!D&&!b&&y.collectLink(N),E?a.createElement("a",Object.assign({href:N},C&&!x&&{target:"_blank",rel:"noopener noreferrer"},k)):a.createElement(j,Object.assign({},k,{onMouseEnter:function(){O.current||null==N||(window.docusaurus.preload(N),O.current=!0)},innerRef:function(e){var t,n;P&&e&&x&&(t=e,n=function(){null!=N&&window.docusaurus.prefetch(N)},(d=new window.IntersectionObserver((function(e){e.forEach((function(e){t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(d.unobserve(t),d.disconnect(),n())}))}))).observe(t))},to:N||""},p&&{isActive:m,activeClassName:f}))}},3919:(e,t,n)=>{"use strict";function i(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!i(e)}n.d(t,{b:()=>i,Z:()=>a})},4996:(e,t,n)=>{"use strict";n.d(t,{C:()=>r,Z:()=>o});var i=n(2263),a=n(3919);function r(){var e=(0,i.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,i){var r=void 0===i?{}:i,o=r.forcePrependBaseUrl,l=void 0!==o&&o,s=r.absolute,u=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,a.b)(n))return n;if(l)return t+n;var d=n.startsWith(t)?n:t+n.replace(/^\//,"");return u?e+d:d}(r,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},3599:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>l,metadata:()=>s,toc:()=>u,default:()=>p});var i=n(4034),a=n(9973),r=(n(7294),n(3905)),o=n(4996),l=(n(6742),{id:"js-table",title:"Showing a table",sidebar_label:"Desktop Plugin - Table"}),s={unversionedId:"tutorial/js-table",id:"tutorial/js-table",isDocsHomePage:!1,title:"Showing a table",description:"Building a Table",source:"@site/../docs/tutorial/js-table.mdx",sourceDirName:"tutorial",slug:"/tutorial/js-table",permalink:"/docs/tutorial/js-table",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/tutorial/js-table.mdx",version:"current",sidebar_label:"Desktop Plugin - Table",frontMatter:{id:"js-table",title:"Showing a table",sidebar_label:"Desktop Plugin - Table"},sidebar:"extending",previous:{title:"Building a Desktop Plugin",permalink:"/docs/tutorial/js-setup"},next:{title:"Building A Custom Desktop Plugin",permalink:"/docs/tutorial/js-custom"}},u=[{value:"Building a Table",id:"building-a-table",children:[{value:"Row Types",id:"row-types",children:[]},{value:"Columns",id:"columns",children:[]},{value:"Configuring the table",id:"configuring-the-table",children:[]}]},{value:"What&#39;s next?",id:"whats-next",children:[]}],d={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{alt:"Android Tutorial App",src:(0,o.Z)("img/android-tutorial-desktop.png")}),(0,r.kt)("h2",{id:"building-a-table"},"Building a Table"),(0,r.kt)("p",null,"We have found that one of the most useful things you can do to understand how your app works\nis to give you easy access to the underlying data used to display items on screen. A very\neasy way of doing this is by showing the data in a table. We have optimized for this\nparticular use case that makes it dead-simple to expose your data in a table that you\ncan sort, filter and select items for more detailed information.\nFor the purpose of this tutorial, we will be editing the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," file that was generated in the previous scaffolding step, and update it as follows:"),(0,r.kt)("h3",{id:"row-types"},"Row Types"),(0,r.kt)("p",null,"We start by defining what our table rows look like as types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Row = {\n  id: number,\n  title: string,\n  url: string,\n};\n")),(0,r.kt)("p",null,"It is important that you have some unique identifier for every row so\nthat we know when something new was added to the table. We will use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field here for this purpose."),(0,r.kt)("h3",{id:"columns"},"Columns"),(0,r.kt)("p",null,"Next, we define which columns to show and how to display them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {DataTableColumn} from 'flipper-plugin';\n\nconst columns: DataTableColumn<Row>[] = [\n  {\n    key: 'title',\n    width: 150,\n  },\n  {\n    key: 'url',\n    title: 'URL',\n  },\n];\n")),(0,r.kt)("p",null,"The keys used here will show up again in the next step when building\nyour rows, so keep them consistent. The ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," we define for each column will show up as the header at the top of the table, and will be default to the ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," value if omitted."),(0,r.kt)("p",null,"For the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," you can either choose a fixed number (pixels), a percentage, or leave it out\nto distribute the remaining available space."),(0,r.kt)("h3",{id:"configuring-the-table"},"Configuring the table"),(0,r.kt)("p",null,"With a type describing the data we'll be storing, ",(0,r.kt)("inlineCode",{parentName:"p"},"Row"),", and a descriptions of the columns to display, getting up table showing our data, including search / sort and a details view is now trivial!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {DataTableColumn, createTablePlugin} from 'flipper-plugin';\n\nmodule.exports = createTablePlugin<Row>({\n  columns,\n  method: 'newRow',\n  key: 'id',\n});\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"method")," refers to the method that should be listened to to fill the table with data.\nThe string ",(0,r.kt)("inlineCode",{parentName:"p"},'"newRow"')," that is used here refers back to identifier we used with ",(0,r.kt)("inlineCode",{parentName:"p"},"connection.send")," to send our data to the Flipper desktop application in the previous step."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," property is optional, but by setting it the ",(0,r.kt)("inlineCode",{parentName:"p"},"'id'")," field will be used as identifier. As a result, once a ",(0,r.kt)("inlineCode",{parentName:"p"},"newRow")," message arrives with an existing ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", it will overwrite the old entry, rather than appending a new one."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"createTablePlugin")," API supports more options, which are documented ",(0,r.kt)("a",{parentName:"p",href:"../extending/flipper-plugin#createtableplugin"},"here"),"."),(0,r.kt)("p",null,"And that's it! Starting Flipper will now compile your\nplugin and connect to the native side. It's a good\nidea to start Flipper from the command line to see\nany potential errors. The console in the DevTools\nis a great source of information if something doesn't\nwork as expected, too.\nThe final result of this step can be seen at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/master/desktop/plugins/public/seamammals/src/index_table.tsx"},"index_table.tsx"),"."),(0,r.kt)("h2",{id:"whats-next"},"What's next?"),(0,r.kt)("p",null,"You now have an interactive table that you can sort,\nfilter and use to get additional information about\nthe stuff you see on screen.\n",(0,r.kt)("inlineCode",{parentName:"p"},"createTablePlugin")," is a high level abstraction that takes care of both connection management and a standardized UI for the most common scenario. "),(0,r.kt)("p",null,"For many cases, this is already all you need. However,\nsometimes you want to go the extra mile and want\nto build something a bit more custom. That's what\nwe're going to do in the next part of our tutorial."))}p.isMDXComponent=!0}}]);